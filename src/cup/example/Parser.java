
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.util.*;
import java.lang.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\003\000\002\002\002\000\002\003\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\005\003\000\002\005\003\000\002\006\003\000\002\006" +
    "\003\000\002\007\003\000\002\007\003\000\002\011\003" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\010\003\000\002\010\003\000\002\012" +
    "\004\000\002\012\004\000\002\013\007\000\002\013\005" +
    "\000\002\013\005\000\002\014\007\000\002\014\005\000" +
    "\002\014\005\000\002\015\004\000\002\015\004\000\002" +
    "\016\005\000\002\016\004\000\002\016\004\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\017\005\000\002\035\002\000" +
    "\002\020\013\000\002\036\002\000\002\021\007\000\002" +
    "\021\002\000\002\022\003\000\002\022\004\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\023\003" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\037\002\000\002\024\016\000\002\025\004\000\002\025" +
    "\004\000\002\025\004\000\002\025\004\000\002\025\004" +
    "\000\002\025\002\000\002\040\002\000\002\026\006\000" +
    "\002\041\002\000\002\032\005\000\002\042\002\000\002" +
    "\033\005\000\002\043\002\000\002\033\005\000\002\044" +
    "\002\000\002\033\006\000\002\045\002\000\002\033\006" +
    "\000\002\030\003\000\002\030\003\000\002\046\002\000" +
    "\002\031\007\000\002\047\002\000\002\031\007\000\002" +
    "\031\004\000\002\031\010\000\002\050\002\000\002\027" +
    "\005\000\002\051\002\000\002\027\005\000\002\027\004" +
    "\000\002\027\004\000\002\027\003\000\002\034\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\014\002\ufffa\050\016\052\010\063\014\103" +
    "\020\001\002\000\016\002\ufffa\050\016\052\010\063\014" +
    "\074\ufffa\103\020\001\002\000\016\002\ufffa\050\016\052" +
    "\010\063\014\074\ufffa\103\020\001\002\000\004\065\300" +
    "\001\002\000\016\002\ufffa\050\016\052\010\063\014\074" +
    "\ufffa\103\020\001\002\000\004\071\247\001\002\000\006" +
    "\002\ufffb\074\ufffb\001\002\000\004\065\246\001\002\000" +
    "\016\002\ufffa\050\016\052\010\063\014\074\ufffa\103\020" +
    "\001\002\000\004\047\237\001\002\000\004\002\236\001" +
    "\002\000\004\071\167\001\002\000\004\065\166\001\002" +
    "\000\030\016\034\020\035\021\037\034\032\035\036\036" +
    "\027\037\031\040\026\044\025\067\030\071\033\001\002" +
    "\000\004\065\024\001\002\000\016\002\ufffa\050\016\052" +
    "\010\063\014\074\ufffa\103\020\001\002\000\006\002\ufffe" +
    "\074\ufffe\001\002\000\016\002\uffdd\050\uffdd\052\uffdd\063" +
    "\uffdd\074\uffdd\103\uffdd\001\002\000\016\071\046\077\042" +
    "\100\043\101\044\102\047\103\045\001\002\000\012\077" +
    "\042\100\043\101\044\103\045\001\002\000\012\077\042" +
    "\100\043\101\044\103\045\001\002\000\010\056\121\057" +
    "\117\060\154\001\002\000\012\077\042\100\043\101\044" +
    "\103\045\001\002\000\012\077\042\100\043\101\044\103" +
    "\045\001\002\000\004\103\uffb9\001\002\000\016\071\046" +
    "\077\042\100\043\101\044\102\047\103\045\001\002\000" +
    "\012\065\uffda\066\uffda\072\uffda\103\uffda\001\002\000\012" +
    "\077\042\100\043\101\044\103\045\001\002\000\012\065" +
    "\uffd9\066\uffd9\072\uffd9\103\uffd9\001\002\000\036\004\ufff3" +
    "\005\ufff3\006\ufff3\007\ufff3\010\ufff3\022\ufff3\065\ufff3\066" +
    "\ufff3\072\ufff3\077\ufff3\100\ufff3\101\ufff3\102\ufff3\103\ufff3" +
    "\001\002\000\012\065\uffd7\066\uffd7\072\uffd7\103\uffd7\001" +
    "\002\000\036\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8" +
    "\022\ufff8\065\ufff8\066\ufff8\072\ufff8\077\ufff8\100\ufff8\101" +
    "\ufff8\102\ufff8\103\ufff8\001\002\000\036\004\ufff7\005\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\022\ufff7\065\ufff7\066\ufff7\072" +
    "\ufff7\077\ufff7\100\ufff7\101\ufff7\102\ufff7\103\ufff7\001\002" +
    "\000\036\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\022" +
    "\ufff6\065\ufff6\066\ufff6\072\ufff6\077\ufff6\100\ufff6\101\ufff6" +
    "\102\ufff6\103\ufff6\001\002\000\036\004\ufff2\005\ufff2\006" +
    "\ufff2\007\ufff2\010\ufff2\022\ufff2\065\ufff2\066\ufff2\072\ufff2" +
    "\077\ufff2\100\ufff2\101\ufff2\102\ufff2\103\ufff2\001\002\000" +
    "\014\071\046\077\042\100\043\101\044\103\045\001\002" +
    "\000\022\065\ufff9\066\ufff9\072\ufff9\077\ufff9\100\ufff9\101" +
    "\ufff9\102\ufff9\103\ufff9\001\002\000\026\004\uffef\005\uffef" +
    "\006\uffef\007\uffef\010\uffef\022\065\065\uffef\066\uffef\072" +
    "\uffef\103\uffef\001\002\000\010\065\uffd3\066\uffd3\103\uffd3" +
    "\001\002\000\024\004\053\005\055\006\054\007\056\010" +
    "\057\065\uffdb\066\uffdb\072\uffdb\103\uffdb\001\002\000\012" +
    "\077\042\100\043\101\044\103\045\001\002\000\012\077" +
    "\042\100\043\101\044\103\045\001\002\000\012\077\042" +
    "\100\043\101\044\103\045\001\002\000\012\077\042\100" +
    "\043\101\044\103\045\001\002\000\012\077\042\100\043" +
    "\101\044\103\045\001\002\000\024\004\uffea\005\uffea\006" +
    "\uffea\007\uffea\010\uffea\065\uffea\066\uffea\072\uffea\103\uffea" +
    "\001\002\000\024\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010" +
    "\uffeb\065\uffeb\066\uffeb\072\uffeb\103\uffeb\001\002\000\024" +
    "\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\065\uffed\066" +
    "\uffed\072\uffed\103\uffed\001\002\000\024\004\uffec\005\uffec" +
    "\006\uffec\007\uffec\010\uffec\065\uffec\066\uffec\072\uffec\103" +
    "\uffec\001\002\000\024\004\uffee\005\uffee\006\uffee\007\uffee" +
    "\010\uffee\065\uffee\066\uffee\072\uffee\103\uffee\001\002\000" +
    "\014\071\046\077\042\100\043\101\044\103\045\001\002" +
    "\000\024\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\065" +
    "\uffe9\066\uffe9\072\uffe9\103\uffe9\001\002\000\016\004\053" +
    "\005\055\006\054\007\056\010\057\072\070\001\002\000" +
    "\024\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\065\uffe8" +
    "\066\uffe8\072\uffe8\103\uffe8\001\002\000\004\103\072\001" +
    "\002\000\010\066\uffb7\067\uffb7\072\uffb7\001\002\000\016" +
    "\002\uffb8\050\uffb8\052\uffb8\063\uffb8\074\uffb8\103\uffb8\001" +
    "\002\000\010\066\075\067\077\072\100\001\002\000\022" +
    "\065\uffb5\066\uffb5\072\uffb5\077\uffb5\100\uffb5\101\uffb5\102" +
    "\uffb5\103\uffb5\001\002\000\016\002\uffb6\050\uffb6\052\uffb6" +
    "\063\uffb6\074\uffb6\103\uffb6\001\002\000\010\056\121\057" +
    "\117\060\116\001\002\000\022\065\uffb3\066\uffb3\072\uffb3" +
    "\077\uffb3\100\uffb3\101\uffb3\102\uffb3\103\uffb3\001\002\000" +
    "\022\065\103\066\105\072\106\077\042\100\043\101\044" +
    "\102\047\103\045\001\002\000\016\002\uffb2\050\uffb2\052" +
    "\uffb2\063\uffb2\074\uffb2\103\uffb2\001\002\000\016\002\uff9f" +
    "\050\uff9f\052\uff9f\063\uff9f\074\uff9f\103\uff9f\001\002\000" +
    "\022\065\uffa5\066\uffa5\072\uffa5\077\uffa5\100\uffa5\101\uffa5" +
    "\102\uffa5\103\uffa5\001\002\000\022\065\103\066\105\072" +
    "\106\077\042\100\043\101\044\102\047\103\045\001\002" +
    "\000\004\065\112\001\002\000\022\065\uffa3\066\uffa3\072" +
    "\uffa3\077\uffa3\100\uffa3\101\uffa3\102\uffa3\103\uffa3\001\002" +
    "\000\022\065\103\066\105\072\106\077\042\100\043\101" +
    "\044\102\047\103\045\001\002\000\016\002\uffa2\050\uffa2" +
    "\052\uffa2\063\uffa2\074\uffa2\103\uffa2\001\002\000\016\002" +
    "\uffa0\050\uffa0\052\uffa0\063\uffa0\074\uffa0\103\uffa0\001\002" +
    "\000\016\002\uffa1\050\uffa1\052\uffa1\063\uffa1\074\uffa1\103" +
    "\uffa1\001\002\000\022\065\103\066\105\072\106\077\042" +
    "\100\043\101\044\102\047\103\045\001\002\000\016\002" +
    "\uffa4\050\uffa4\052\uffa4\063\uffa4\074\uffa4\103\uffa4\001\002" +
    "\000\010\066\uffaf\072\uffaf\103\uffaf\001\002\000\016\016" +
    "\uffe6\065\uffe6\066\uffe6\072\uffe6\073\uffe6\103\uffe6\001\002" +
    "\000\010\066\uffb1\072\uffb1\103\uffb1\001\002\000\016\016" +
    "\uffe7\065\uffe7\066\uffe7\072\uffe7\073\uffe7\103\uffe7\001\002" +
    "\000\010\066\123\072\126\103\125\001\002\000\010\066" +
    "\123\072\126\103\125\001\002\000\016\002\uffb0\050\uffb0" +
    "\052\uffb0\063\uffb0\074\uffb0\103\uffb0\001\002\000\004\067" +
    "\136\001\002\000\004\067\127\001\002\000\010\055\130" +
    "\056\121\057\117\001\002\000\004\073\uffac\001\002\000" +
    "\004\073\uffad\001\002\000\004\073\133\001\002\000\014" +
    "\050\016\052\010\063\014\074\ufffa\103\020\001\002\000" +
    "\004\074\135\001\002\000\016\002\uffa6\050\uffa6\052\uffa6" +
    "\063\uffa6\074\uffa6\103\uffa6\001\002\000\010\056\121\057" +
    "\117\060\137\001\002\000\010\066\uffa9\072\uffa9\103\uffa9" +
    "\001\002\000\010\066\uffab\072\uffab\103\uffab\001\002\000" +
    "\010\066\123\072\126\103\125\001\002\000\016\002\uffaa" +
    "\050\uffaa\052\uffaa\063\uffaa\074\uffaa\103\uffaa\001\002\000" +
    "\010\066\123\072\126\103\125\001\002\000\016\002\uffa8" +
    "\050\uffa8\052\uffa8\063\uffa8\074\uffa8\103\uffa8\001\002\000" +
    "\016\002\uffa7\050\uffa7\052\uffa7\063\uffa7\074\uffa7\103\uffa7" +
    "\001\002\000\010\066\123\072\126\103\125\001\002\000" +
    "\016\002\uffae\050\uffae\052\uffae\063\uffae\074\uffae\103\uffae" +
    "\001\002\000\022\065\103\066\105\072\106\077\042\100" +
    "\043\101\044\102\047\103\045\001\002\000\016\002\uffb4" +
    "\050\uffb4\052\uffb4\063\uffb4\074\uffb4\103\uffb4\001\002\000" +
    "\012\065\uffd8\066\uffd8\072\uffd8\103\uffd8\001\002\000\012" +
    "\065\uffd5\066\uffd5\072\uffd5\103\uffd5\001\002\000\012\016" +
    "\160\065\uffde\066\uffde\103\uffde\001\002\000\012\016\156" +
    "\065\uffe1\066\uffe1\103\uffe1\001\002\000\014\071\046\077" +
    "\042\100\043\101\044\103\045\001\002\000\022\004\053" +
    "\005\055\006\054\007\056\010\057\065\uffe3\066\uffe3\103" +
    "\uffe3\001\002\000\004\102\047\001\002\000\010\065\uffe0" +
    "\066\uffe0\103\uffe0\001\002\000\012\065\uffd6\066\uffd6\072" +
    "\uffd6\103\uffd6\001\002\000\012\065\uffd4\066\uffd4\072\uffd4" +
    "\103\uffd4\001\002\000\010\065\uffdf\066\uffdf\103\uffdf\001" +
    "\002\000\022\004\053\005\055\006\054\007\056\010\057" +
    "\065\uffe2\066\uffe2\103\uffe2\001\002\000\016\002\uffe4\050" +
    "\uffe4\052\uffe4\063\uffe4\074\uffe4\103\uffe4\001\002\000\012" +
    "\017\uffd2\077\uffd2\100\uffd2\103\uffd2\001\002\000\012\017" +
    "\172\077\171\100\173\103\176\001\002\000\030\011\ufff5" +
    "\014\ufff5\015\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\031" +
    "\ufff5\032\ufff5\065\ufff5\072\ufff5\001\002\000\012\017\172" +
    "\077\171\100\173\103\176\001\002\000\030\011\ufff4\014" +
    "\ufff4\015\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\031\ufff4" +
    "\032\ufff4\065\ufff4\072\ufff4\001\002\000\030\011\ufff1\014" +
    "\ufff1\015\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\031\ufff1" +
    "\032\ufff1\065\ufff1\072\ufff1\001\002\000\030\011\uffc8\014" +
    "\221\015\222\023\224\024\226\025\223\026\225\031\uffc8" +
    "\032\uffc8\065\uffc8\072\uffc8\001\002\000\030\011\ufff0\014" +
    "\ufff0\015\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\031\ufff0" +
    "\032\ufff0\065\ufff0\072\ufff0\001\002\000\014\011\215\031" +
    "\213\032\214\065\uffcd\072\uffcd\001\002\000\004\072\201" +
    "\001\002\000\004\073\202\001\002\000\014\050\016\052" +
    "\010\063\014\074\ufffa\103\020\001\002\000\004\074\204" +
    "\001\002\000\020\002\uffce\050\uffce\051\205\052\uffce\063" +
    "\uffce\074\uffce\103\uffce\001\002\000\004\073\207\001\002" +
    "\000\016\002\uffd1\050\uffd1\052\uffd1\063\uffd1\074\uffd1\103" +
    "\uffd1\001\002\000\014\050\uffd0\052\uffd0\063\uffd0\074\uffd0" +
    "\103\uffd0\001\002\000\014\050\016\052\010\063\014\074" +
    "\ufffa\103\020\001\002\000\004\074\212\001\002\000\016" +
    "\002\uffcf\050\uffcf\052\uffcf\063\uffcf\074\uffcf\103\uffcf\001" +
    "\002\000\012\017\172\077\171\100\173\103\176\001\002" +
    "\000\012\017\172\077\171\100\173\103\176\001\002\000" +
    "\012\017\172\077\171\100\173\103\176\001\002\000\006" +
    "\065\uffc9\072\uffc9\001\002\000\006\065\uffca\072\uffca\001" +
    "\002\000\006\065\uffcb\072\uffcb\001\002\000\010\077\171" +
    "\100\173\103\176\001\002\000\010\077\171\100\173\103" +
    "\176\001\002\000\010\077\171\100\173\103\176\001\002" +
    "\000\010\077\171\100\173\103\176\001\002\000\010\077" +
    "\171\100\173\103\176\001\002\000\010\077\171\100\173" +
    "\103\176\001\002\000\014\011\uffc4\031\uffc4\032\uffc4\065" +
    "\uffc4\072\uffc4\001\002\000\014\011\uffc6\031\uffc6\032\uffc6" +
    "\065\uffc6\072\uffc6\001\002\000\014\011\uffc7\031\uffc7\032" +
    "\uffc7\065\uffc7\072\uffc7\001\002\000\014\011\uffc5\031\uffc5" +
    "\032\uffc5\065\uffc5\072\uffc5\001\002\000\014\011\uffc3\031" +
    "\uffc3\032\uffc3\065\uffc3\072\uffc3\001\002\000\014\011\uffc2" +
    "\031\uffc2\032\uffc2\065\uffc2\072\uffc2\001\002\000\006\065" +
    "\uffcc\072\uffcc\001\002\000\004\002\000\001\002\000\004" +
    "\064\240\001\002\000\004\071\241\001\002\000\004\102" +
    "\047\001\002\000\004\072\243\001\002\000\004\065\244" +
    "\001\002\000\006\002\uff9e\074\uff9e\001\002\000\006\002" +
    "\001\074\001\001\002\000\016\002\uffdc\050\uffdc\052\uffdc" +
    "\063\uffdc\074\uffdc\103\uffdc\001\002\000\010\065\uffc1\066" +
    "\uffc1\103\uffc1\001\002\000\010\065\uffba\066\251\103\257" +
    "\001\002\000\010\065\uffba\066\251\103\257\001\002\000" +
    "\010\065\uffba\066\251\103\257\001\002\000\010\065\uffba" +
    "\066\251\103\257\001\002\000\010\065\uffba\066\251\103" +
    "\257\001\002\000\010\065\uffba\066\251\103\257\001\002" +
    "\000\004\065\260\001\002\000\026\016\034\020\035\021" +
    "\037\034\032\035\036\036\027\037\031\040\026\044\025" +
    "\067\030\001\002\000\012\017\172\077\171\100\173\103" +
    "\176\001\002\000\004\065\262\001\002\000\004\103\264" +
    "\001\002\000\004\072\266\001\002\000\022\016\265\020" +
    "\035\021\037\034\032\035\036\036\027\037\031\040\026" +
    "\001\002\000\014\071\046\077\042\100\043\101\044\103" +
    "\045\001\002\000\004\073\267\001\002\000\014\050\016" +
    "\052\010\063\014\074\ufffa\103\020\001\002\000\004\074" +
    "\271\001\002\000\016\002\uffc0\050\uffc0\052\uffc0\063\uffc0" +
    "\074\uffc0\103\uffc0\001\002\000\004\065\uffbe\001\002\000" +
    "\004\065\uffbf\001\002\000\004\065\uffbd\001\002\000\004" +
    "\065\uffbc\001\002\000\004\065\uffbb\001\002\000\006\002" +
    "\uffff\074\uffff\001\002\000\016\002\uffe5\050\uffe5\052\uffe5" +
    "\063\uffe5\074\uffe5\103\uffe5\001\002\000\006\002\ufffd\074" +
    "\ufffd\001\002\000\006\002\ufffc\074\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\030\002\014\012\012\013\005\014\016\015" +
    "\006\016\020\017\011\020\021\024\004\026\003\034\010" +
    "\001\001\000\030\002\301\012\012\013\005\014\016\015" +
    "\006\016\020\017\011\020\021\024\004\026\003\034\010" +
    "\001\001\000\030\002\300\012\012\013\005\014\016\015" +
    "\006\016\020\017\011\020\021\024\004\026\003\034\010" +
    "\001\001\000\002\001\001\000\030\002\276\012\012\013" +
    "\005\014\016\015\006\016\020\017\011\020\021\024\004" +
    "\026\003\034\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\002\244\012\012\013\005" +
    "\014\016\015\006\016\020\017\011\020\021\024\004\026" +
    "\003\034\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\002\022\012\012\013\005\014\016" +
    "\015\006\016\020\017\011\020\021\024\004\026\003\034" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\163\004\037\006\047\011\164\001\001\000\006\004" +
    "\037\006\162\001\001\000\006\004\037\006\161\001\001" +
    "\000\004\010\154\001\001\000\006\004\037\006\152\001" +
    "\001\000\006\004\037\006\151\001\001\000\004\040\070" +
    "\001\001\000\012\003\050\004\037\006\047\011\051\001" +
    "\001\000\002\001\001\000\006\004\037\006\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\037\006\047\011\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\037\006\063\001\001\000\006\004" +
    "\037\006\062\001\001\000\006\004\037\006\061\001\001" +
    "\000\006\004\037\006\060\001\001\000\006\004\037\006" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\037\006\047\011\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\072\001\001\000" +
    "\004\041\073\001\001\000\002\001\001\000\004\033\075" +
    "\001\001\000\004\042\147\001\001\000\002\001\001\000" +
    "\004\010\117\001\001\000\004\043\100\001\001\000\012" +
    "\003\106\004\037\006\103\027\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\113\001\001\000\012" +
    "\003\106\004\037\006\103\027\112\001\001\000\002\001" +
    "\001\000\004\051\107\001\001\000\012\003\106\004\037" +
    "\006\103\027\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\106\004\037\006\103" +
    "\027\114\001\001\000\002\001\001\000\004\045\145\001" +
    "\001\000\002\001\001\000\004\044\121\001\001\000\002" +
    "\001\001\000\004\031\123\001\001\000\004\031\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\130\030\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\002\133\012\012" +
    "\013\005\014\016\015\006\016\020\017\011\020\021\024" +
    "\004\026\003\034\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\137\001\001\000\004\047\142\001" +
    "\001\000\004\046\140\001\001\000\004\031\141\001\001" +
    "\000\002\001\001\000\004\031\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\146\001\001\000\002" +
    "\001\001\000\012\003\106\004\037\006\103\027\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\037\006" +
    "\047\011\156\001\001\000\002\001\001\000\004\003\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\167\001\001\000\012\005\173\007\174\022" +
    "\177\023\176\001\001\000\002\001\001\000\012\005\173" +
    "\007\174\022\234\023\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\002" +
    "\202\012\012\013\005\014\016\015\006\016\020\017\011" +
    "\020\021\024\004\026\003\034\010\001\001\000\002\001" +
    "\001\000\004\021\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\207\001\001\000\030\002\210\012" +
    "\012\013\005\014\016\015\006\016\020\017\011\020\021" +
    "\024\004\026\003\034\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\173\007\174\022\217\023\176" +
    "\001\001\000\012\005\173\007\174\022\216\023\176\001" +
    "\001\000\012\005\173\007\174\022\215\023\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\173\007\233\001\001\000\006\005\173\007\232" +
    "\001\001\000\006\005\173\007\231\001\001\000\006\005" +
    "\173\007\230\001\001\000\006\005\173\007\227\001\001" +
    "\000\006\005\173\007\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\241" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\247" +
    "\001\001\000\014\013\253\014\254\016\252\017\251\025" +
    "\255\001\001\000\014\013\253\014\254\016\252\017\251" +
    "\025\275\001\001\000\014\013\253\014\254\016\252\017" +
    "\251\025\274\001\001\000\014\013\253\014\254\016\252" +
    "\017\251\025\273\001\001\000\014\013\253\014\254\016" +
    "\252\017\251\025\272\001\001\000\014\013\253\014\254" +
    "\016\252\017\251\025\271\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\173\007\174\022\260\023\176" +
    "\001\001\000\002\001\001\000\004\016\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\037\006\047" +
    "\011\051\001\001\000\002\001\001\000\030\002\267\012" +
    "\012\013\005\014\016\015\006\016\020\017\011\020\021" +
    "\024\004\026\003\034\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG2

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG3
 return lexer.next_token(); 
    }

//@@CUPDBG0

  protected Lexer lexer;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

//@@CUPDBG1

	Map<String, String> stringTable = new HashMap<>();
	Map<String, Integer> intTable = new HashMap<>();
	Map<String, Integer> explicitRadixIntTable = new HashMap<>();
	Map<String, Double> realTable = new HashMap<>();
	int dataType = 0;
	Map<String, List<Integer>> functionTable = new HashMap<>();
	ArrayList<Integer> arguments;
	String name = "";
	String firstArgName = "";

	public void initialize(String id, Object value){
		if(stringTable.containsKey(id) || intTable.containsKey(id) || explicitRadixIntTable.containsKey(id) || realTable.containsKey(id)){
			System.err.println("ERROR: Variable \""+id+"\" has been already initialized!!");
		}
		else{
			if(dataType == 1){
				stringTable.put(id,(String)value);
				System.out.println("variable \""+id+"\" initialized and assigned to \""+value+"\" as \"string\" type ^_^");
			}
			if(dataType == 2){
				intTable.put(id,(Integer)value);
				System.out.println("Variable \""+id+"\" initialized and assigned to \""+value+"\" as \"int\" type ^_^");
			}
			if(dataType == 3){
				explicitRadixIntTable.put(id,(Integer)value);
				System.out.println("Variable \""+id+"\" initialized and assigned to \""+value+"\" as \"int\" type ^_^");
			}
			if(dataType == 4){
				realTable.put(id,(Double)value);
				System.out.println("Variable \""+id+"\" initialized and assigned to \""+value+"\" as \"real\" type ^_^");
			}
		}
	}
	
	public void assign(String id, Object value){
		if(!(stringTable.containsKey(id)) && !(intTable.containsKey(id)) && !(explicitRadixIntTable.containsKey(id)) && !(realTable.containsKey(id))){
			System.err.println("ERROR: Variable \""+id+"\" has not been initialized yet!!");
			return;
		}
		else{
			if(stringTable.containsKey(id)){
				if(dataType == 1){
					stringTable.put(id,(String)value);
					System.out.println("Variable \""+id+"\" updated to \""+value+"\"");
				}
				else{
					System.err.println("ERROR: Type mismatched!!");
				}
			}
			if(intTable.containsKey(id)){
				if(dataType == 2){
					intTable.put(id,(Integer)value);
					System.out.println("Variable \""+id+"\" updated to \""+value+"\"");
				}
				else{
					System.err.println("ERROR: Type mismatched!!");
				}
			}
			if(explicitRadixIntTable.containsKey(id)){
				if(dataType == 3){
					explicitRadixIntTable.put(id,(Integer)value);
					System.out.println("Variable \""+id+"\" updated to \""+value+"\"");
				}
				else{
					System.err.println("ERROR: Type mismatched!!");
				}
			}
			if(realTable.containsKey(id)){
				if(dataType == 4){
					realTable.put(id,(Double)value);
					System.out.println("Variable \""+id+"\" updated to \""+value+"\"");
				}
				else{
					System.err.println("ERROR: Type mismatched!!");
				}
			}
		}
	}

	public Object getValueOfIdentifier(String id){
		if(!(stringTable.containsKey(id)) && !(intTable.containsKey(id)) && !(explicitRadixIntTable.containsKey(id)) && !(realTable.containsKey(id))){
			System.err.println("ERROR: Variable \""+id+"\" has not been initialized yet!!");
			return 0;
		}
		else{
			if(stringTable.containsKey(id)){
				dataType = 1;
				return stringTable.get(id);
			}
			if(intTable.containsKey(id)){
				dataType = 2;
				return intTable.get(id);
			}
			if(explicitRadixIntTable.containsKey(id)){
				dataType = 3;
				return explicitRadixIntTable.get(id);
			}
			if(realTable.containsKey(id)){
				dataType = 4;
				return realTable.get(id);
			}
		}
		return 0;
	}

	public void createFunction(String name, ArrayList<Integer> argument){
		if(functionTable.containsKey(name)){
			System.err.println("ERROR: Function \""+name+"\" has been already existed!!");
		}
		else{
			ArrayList<Integer> l = new ArrayList<Integer>();
			l = argument;
			functionTable.put(name, l);
			System.out.println("Function \""+name+"\" created ^_^"); 
		}
	}

	public void checkFunction(String name, ArrayList<Integer> arguments){
		if(!functionTable.containsKey(name)){
			System.err.println("ERROR: Function \""+name+"\" has not been initialized yet!!");
		}
		else{
			if(!(functionTable.get(name).equals(arguments))){
				System.err.println(" => ERROR: Wrong arguments U_U");
			}
			else{
				System.out.println("Succesfully o_o");
			}
			
		}
	}

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // body ::= initialize body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= body EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // body ::= assignment body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // body ::= if_statement body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // body ::= for_statement body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // body ::= function_section body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // body ::= print_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // body ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // strings ::= STRING_LITERAL 
            {
              String RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG4
 dataType = 1; RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("strings",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // numbers ::= INTEGER_LITERAL 
            {
              Number RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG5
 dataType = 2; RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numbers",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // numbers ::= EXPLICIT_RADIX_INTEGER_LITERAL 
            {
              Number RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG6
 dataType = 3; RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numbers",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // numbers ::= REAL_LITERAL 
            {
              Number RESULT =null;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG7
 dataType = 4; RESULT = r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numbers",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // int_numbers ::= INTEGER_LITERAL 
            {
              Integer RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG8
 dataType = 2; RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_numbers",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // int_numbers ::= EXPLICIT_RADIX_INTEGER_LITERAL 
            {
              Integer RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG9
 dataType = 3; RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_numbers",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operand ::= numbers 
            {
              Object RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Number n = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG10
 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operand",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operand ::= IDENTIFIER 
            {
              Object RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG11
 RESULT = getValueOfIdentifier(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operand",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // int_operand ::= int_numbers 
            {
              Integer RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG12
 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_operand",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // int_operand ::= IDENTIFIER 
            {
              Integer RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG13
 Object out = getValueOfIdentifier(i); if(dataType == 2 || dataType == 3){RESULT = (Integer)out;} else{System.err.println("ERROR: Just Integer values are permited");} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_operand",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // math_calculation ::= operand 
            {
              Number RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG14
 if(dataType == 2 || dataType == 3){RESULT = (Integer)e;} if(dataType == 4){RESULT = (Double)e;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("math_calculation",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // math_calculation ::= math_calculation PLUS operand 
            {
              Number RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Number e1 = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG15
 if(dataType == 2 || dataType == 3){RESULT = ((Integer)e1 + (Integer)e2);} if(dataType == 4){RESULT = ((Double)e1 + (Double)e2);}	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("math_calculation",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // math_calculation ::= math_calculation MINUS operand 
            {
              Number RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Number e1 = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG16
 if(dataType == 2 || dataType == 3){RESULT = ((Integer)e1 - (Integer)e2);} if(dataType == 4){RESULT = ((Double)e1 - (Double)e2);}	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("math_calculation",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // math_calculation ::= math_calculation MUL operand 
            {
              Number RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Number e1 = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG17
 if(dataType == 2 || dataType == 3){RESULT = ((Integer)e1 * (Integer)e2);} if(dataType == 4){RESULT = ((Double)e1 * (Double)e2);}	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("math_calculation",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // math_calculation ::= math_calculation DIV operand 
            {
              Number RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Number e1 = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG18
 if(dataType == 2 || dataType == 3){RESULT = ((Integer)e1 / (Integer)e2);} if(dataType == 4){RESULT = ((Double)e1 / (Double)e2);}	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("math_calculation",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // math_calculation ::= math_calculation REM operand 
            {
              Number RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Number e1 = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG19
 if(dataType == 2 || dataType == 3){RESULT = ((Integer)e1 % (Integer)e2);} if(dataType == 4){RESULT = ((Double)e1 % (Double)e2);}	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("math_calculation",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // math_calculation ::= operand POW math_calculation 
            {
              Number RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Number e2 = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG20
 RESULT = (Math.pow((Integer)e1, (Integer)e2));	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("math_calculation",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // math_calculation ::= LPRAN math_calculation RPRAN 
            {
              Number RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Number e = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG21
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("math_calculation",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= INT 
            {
              String RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG22
 dataType = 2; RESULT = (String)i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type ::= REAL 
            {
              String RESULT =null;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG23
 dataType = 4; RESULT = (String)r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // initialize ::= num_initialize SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialize",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // initialize ::= str_initialize SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialize",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // num_initialize ::= IDENTIFIER COLON type EQ math_calculation 
            {
              Object RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Number m = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG24
 initialize(i,m);	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_initialize",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // num_initialize ::= IDENTIFIER DECLARE math_calculation 
            {
              Object RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Number m = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG25
 initialize(i,m);	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_initialize",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // num_initialize ::= IDENTIFIER COLON type 
            {
              Object RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG26
 initialize(i,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_initialize",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // str_initialize ::= IDENTIFIER COLON STRING EQ strings 
            {
              Object RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG27
 initialize(i,s);	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("str_initialize",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // str_initialize ::= IDENTIFIER DECLARE strings 
            {
              Object RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG28
 initialize(i,s);	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("str_initialize",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // str_initialize ::= IDENTIFIER COLON STRING 
            {
              Object RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG29
 initialize(i,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("str_initialize",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // assignment ::= num_assignment SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // assignment ::= str_assignment SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // num_assignment ::= IDENTIFIER EQ math_calculation 
            {
              Object RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Number m = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG30
 assign(i,m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_assignment",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // num_assignment ::= IDENTIFIER PPLUS 
            {
              Object RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG31
 Object out = getValueOfIdentifier(i); if(dataType == 2 || dataType == 3){assign(i,(Object)((Integer)out + 1));} else{System.err.println("ERROR: Just Integer values are permited");} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_assignment",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // num_assignment ::= IDENTIFIER MMINUS 
            {
              Object RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG32
 Object out = getValueOfIdentifier(i); if(dataType == 2 || dataType == 3){assign(i,(Object)((Integer)out - 1));} else{System.err.println("ERROR: Just Integer values are permited");} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_assignment",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // num_assignment ::= IDENTIFIER PLUSEQ operand 
            {
              Object RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG33
 Object out = getValueOfIdentifier(i); if(dataType == 2 || dataType == 3){assign(i,(Object)((Integer)out + (Integer)e2));} if(dataType == 4){assign(i,(Object)((Double)out + (Double)e2));}	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_assignment",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // num_assignment ::= IDENTIFIER MINUSEQ operand 
            {
              Object RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG34
 Object out = getValueOfIdentifier(i); if(dataType == 2 || dataType == 3){assign(i,(Object)((Integer)out - (Integer)e2));} if(dataType == 4){assign(i,(Object)((Double)out - (Double)e2));}	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_assignment",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // num_assignment ::= IDENTIFIER MULEQ operand 
            {
              Object RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG35
 Object out = getValueOfIdentifier(i); if(dataType == 2 || dataType == 3){assign(i,(Object)((Integer)out * (Integer)e2));} if(dataType == 4){assign(i,(Object)((Double)out * (Double)e2));}	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_assignment",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // num_assignment ::= IDENTIFIER DIVEQ operand 
            {
              Object RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG36
 Object out = getValueOfIdentifier(i); if(dataType == 2 || dataType == 3){assign(i,(Object)((Integer)out / (Integer)e2));} if(dataType == 4){assign(i,(Object)((Double)out / (Double)e2));}	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_assignment",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // num_assignment ::= IDENTIFIER REMEQ operand 
            {
              Object RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG37
 Object out = getValueOfIdentifier(i); if(dataType == 2 || dataType == 3){assign(i,(Object)((Integer)out % (Integer)e2));} else{System.err.println("ERROR: Just Integer values are permited");} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_assignment",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // str_assignment ::= IDENTIFIER EQ strings 
            {
              Object RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG38
 assign(i,s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("str_assignment",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$0 ::= 
            {
              Object RESULT =null;
//@@CUPDBG39
 System.out.println("There is a If statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // if_statement ::= IF LPRAN NT$0 conditions RPRAN BEGIN body END else_statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$1 ::= 
            {
              Object RESULT =null;
//@@CUPDBG40
 System.out.println("There is a Else statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // else_statement ::= ELSE BEGIN NT$1 body END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // else_statement ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // conditions ::= compare 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditions",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // conditions ::= NOT conditions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditions",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // conditions ::= compare AND conditions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditions",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // conditions ::= compare OR conditions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditions",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // conditions ::= compare XOR conditions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditions",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // compare ::= int_operand 
            {
              Object RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compare",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // compare ::= int_operand EQUALTO int_operand 
            {
              Object RESULT =null;
		Location i1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location i1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Integer i1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location i2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location i2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer i2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compare",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // compare ::= int_operand NEQ int_operand 
            {
              Object RESULT =null;
		Location i1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location i1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Integer i1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location i2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location i2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer i2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compare",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // compare ::= int_operand GTEQ int_operand 
            {
              Object RESULT =null;
		Location i1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location i1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Integer i1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location i2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location i2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer i2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compare",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // compare ::= int_operand LTEQ int_operand 
            {
              Object RESULT =null;
		Location i1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location i1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Integer i1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location i2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location i2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer i2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compare",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // compare ::= int_operand GT int_operand 
            {
              Object RESULT =null;
		Location i1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location i1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Integer i1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location i2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location i2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer i2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compare",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // compare ::= int_operand LT int_operand 
            {
              Object RESULT =null;
		Location i1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location i1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Integer i1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location i2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location i2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer i2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compare",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$2 ::= 
            {
              Object RESULT =null;
//@@CUPDBG41
 System.out.println("There is a For statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // for_statement ::= FOR LPRAN NT$2 loop_initialize SEMI conditions SEMI num_assignment RPRAN BEGIN body END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // loop_initialize ::= num_initialize loop_initialize 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_initialize",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // loop_initialize ::= str_initialize loop_initialize 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_initialize",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // loop_initialize ::= num_assignment loop_initialize 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_initialize",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // loop_initialize ::= str_assignment loop_initialize 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_initialize",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // loop_initialize ::= COMMA loop_initialize 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_initialize",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // loop_initialize ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_initialize",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$3 ::= 
            {
              Object RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
//@@CUPDBG42
 name =  i; arguments = new ArrayList<Integer>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // function_section ::= IDENTIFIER LPRAN NT$3 arguments 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_section",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$4 ::= 
            {
              Object RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
//@@CUPDBG43
 if(!(stringTable.containsKey(i)) && !(intTable.containsKey(i)) && !(explicitRadixIntTable.containsKey(i)) && !(realTable.containsKey(i))){firstArgName = i;} else{ getValueOfIdentifier(i); }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // arguments ::= IDENTIFIER NT$4 call_or_create 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$5 ::= 
            {
              Object RESULT =null;
//@@CUPDBG44
 arguments.add(dataType); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // call_or_create ::= COMMA NT$5 call_function 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_or_create",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$6 ::= 
            {
              Object RESULT =null;
//@@CUPDBG45
 arguments.add(dataType); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // call_or_create ::= RPRAN NT$6 call_function 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_or_create",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$7 ::= 
            {
              Object RESULT =null;
//@@CUPDBG46
 arguments.add(dataType); initialize(firstArgName,null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // call_or_create ::= COLON type NT$7 function_initialize 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_or_create",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$8 ::= 
            {
              Object RESULT =null;
//@@CUPDBG47
 dataType = 1; arguments.add(dataType); initialize(firstArgName,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // call_or_create ::= COLON STRING NT$8 function_initialize 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_or_create",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // function_type ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_type",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // function_type ::= ADT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_type",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$9 ::= 
            {
              Object RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
//@@CUPDBG48
 arguments.add(dataType); initialize(i,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // function_initialize ::= IDENTIFIER COLON type NT$9 function_initialize 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_initialize",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$10 ::= 
            {
              Object RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
//@@CUPDBG49
 dataType = 1; arguments.add(dataType); initialize(i,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // function_initialize ::= IDENTIFIER COLON STRING NT$10 function_initialize 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_initialize",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // function_initialize ::= COMMA function_initialize 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_initialize",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // function_initialize ::= RPRAN COLON function_type BEGIN body END 
            {
              Object RESULT =null;
		//@@CUPDBG50
 createFunction(name, arguments); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_initialize",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$11 ::= 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
//@@CUPDBG51
 arguments.add(dataType); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // call_function ::= operand NT$11 call_function 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$12 ::= 
            {
              Object RESULT =null;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
//@@CUPDBG52
 arguments.add(dataType); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // call_function ::= strings NT$12 call_function 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // call_function ::= COMMA call_function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // call_function ::= RPRAN SEMI 
            {
              Object RESULT =null;
		//@@CUPDBG53
 System.out.print("Function \""+name+"\" called "); checkFunction(name, arguments); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // call_function ::= SEMI 
            {
              Object RESULT =null;
		//@@CUPDBG54
 System.out.print("Function \""+name+"\" called "); checkFunction(name, arguments); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // print_statement ::= SYS GO PRINT LPRAN strings RPRAN SEMI 
            {
              Object RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG55
 System.out.println("print: \""+s+"\""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
